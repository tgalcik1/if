// autogenerated by electron builder
'use strict'

const { ipcMain } = require('electron');
const path = require('path');
const { spawn } = require('child_process');
import { app, protocol, BrowserWindow } from 'electron'
import { createProtocol } from 'vue-cli-plugin-electron-builder/lib'
import installExtension, { VUEJS3_DEVTOOLS } from 'electron-devtools-installer'
const isDevelopment = process.env.NODE_ENV !== 'production'

protocol.registerSchemesAsPrivileged([
  { scheme: 'app', privileges: { secure: true, standard: true } }
])

async function createWindow() {
  const win = new BrowserWindow({
    width: 1600,
    height: 900,
    webPreferences: {
      nodeIntegration: process.env.ELECTRON_NODE_INTEGRATION,
      contextIsolation: !process.env.ELECTRON_NODE_INTEGRATION,
      preload: path.join(__dirname, 'preload.js'),
    }
  });

  win.setMenuBarVisibility(false);

  if (process.env.WEBPACK_DEV_SERVER_URL) {
    await win.loadURL(process.env.WEBPACK_DEV_SERVER_URL);
  } else {
    createProtocol('app');
    win.loadURL('app://./index.html');
  }
}

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) createWindow()
})

app.on('ready', async () => {
  if (isDevelopment && !process.env.IS_TEST) {
    try {
      await installExtension(VUEJS3_DEVTOOLS)
    } catch (e) {
      console.error('Vue Devtools failed to install:', e.toString())
    }
  }
  createWindow()
})

if (isDevelopment) {
  if (process.platform === 'win32') {
    process.on('message', (data) => {
      if (data === 'graceful-exit') {
        app.quit()
      }
    })
  } else {
    process.on('SIGTERM', () => {
      app.quit()
    })
  }
}

let pythonProcess = null;
// main command handler from front end renderer process
ipcMain.on('toMain', (event, args) => {
  console.log(args);
  // handle command from renderer
  switch(args['command']){

    case 'start-game':
      console.log('start game called');
      startPythonGameEngine(event);
      break;

    case 'end-game':
      console.log('end game called');
      pythonProcess.kill();
      break;

    case 'send-message':
      console.log('send message called, message:', args['message']);
      pythonProcess.stdin.write(args['message'] + '\n');
      break;

    default:
      console.log('no command given')
    }
});


function startPythonGameEngine(event){
  const pythonScriptPath = path.join(__dirname, '../../game-engine/main.py');

  let pythonExecutable;
  if (process.platform === 'win32') {
    pythonExecutable = path.join(__dirname, '../../venv/Scripts/python.exe');
  } else {
    pythonExecutable = path.join(__dirname, '../../venv/bin/python');
  }

  pythonProcess = spawn(pythonExecutable, [pythonScriptPath]);
  //pythonProcess = spawn('python', [pythonScriptPath]);

  // fun fact electron likes to buffer data. this causes json.parse to freak out
  let buffer = '';

  // handle stdout from python process - modified to un-buffer data
  pythonProcess.stdout.on('data', (data) => {
    buffer += data.toString();

    let lines = buffer.split('\n');
    buffer = lines.pop();

    for (const line of lines){
      console.log(`[GAME ENGINE]: ${line}`);
      const output = JSON.parse(line.toString());
      event.reply('fromMain', output);
    }
  });
}